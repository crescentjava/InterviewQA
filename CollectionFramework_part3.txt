Collection(1.2)-----Set(1.2)----HashSet(1.2)---LinkedHashSet(1.4)

Set(1.2)-----SortedSet(I)(1.2)--NavigableSet(I)(1.6)---TreeSet(1.2)


Set
---
-child interface of Collection
-If we want to represent a group of individual objects as single entity where duplicates are not allowd and insertion order is not preserved then we should go for Set.
-Set interface doesn't contain any new methods. So we have to only Collection interface methods.

HashSet
-------
-The underlying data structure is Hashtable
-Duplicates are not allowed.It we are trying to insert duplicates, we won't get any compiletime or runtime errors. add() method simply returns false.
-Insertion order is not preserved and all objects will be inserted based on hash-code of objects.
-Heterogeneous objects are allowed.
-null insertion is possible
-implements Serializable and Cloneable interfaces but not RandomAccess.
-HashSet is the best choice, if our frequent operation is Search operation.

constructors(same constructor list for LinkedHashSet,Hashtable,HashMap..)
-------------
1)HashSet h=new HashSet();
-creates an empty HashSet object with default initial capacity - 16  & default Fill Ratio/Load factor - 0.75

2)HashSet h=new HashSet(int initialcapacity)
-Creates an empty HashSet object with specified initial capacity & default fill ratio/Load factor - 0.75

3)HashSet h=new HashSet(int initialcapacity,float loadfactor)

4)HashSet h=new HashSet(Collection c)
-for inter conversion between Collection objects.

Load Factor/Fill Ratio:
-After loading the how much factor, a new HashSet object will be created, that factor is called as Load Factor or Fill Ratio.

LinkedHashSet
-------------
-It is the child class of HashSet.
-introduced in 1.4 version
-It is exactly same as HashSet except the following differences.

HashSet:
-The underlying data structure is Hashtable.
-Insertion order is not preserved
-introduced in 1.2 version

LinkedHashSet
-The underlying data structure is Hash table+LinkedList.(that is hybrid data structure)
-insertion order is preserved
-introduced in 1.4 version.

Note: LinkedHashSet is the best choice to develop cache based applications, where duplicates are not allowed and insertion order must be preserved.


SortedSet(I)
------------
-It is the child interface of set.
-If we want to represent a group of individual objects according to some sorting order and duplicates are not allowed then we should go for SortedSet.

SortedSet Specific methods
--------------------------
Object first() - returns first element of the SortedSet

Object last() - returns last element of the SortedSet
SortedSet headSet(Object obj) - returns the SortedSet whose elements are < obj

SortedSet tailSet(Object obj) - returns the SortedSet whose elements are>=obj

SortedSet subSet(Object obj1,Object obj2)
 -returns the SortedSet whose elements are>=obj1 and <obj2.
Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.

comparator()
Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements.

Example: {100,101,103,104,107,110,115}
1)first() -> 100
2)last() ->115
3)headSet(104) ->[100,101,103]
4)tailSet(104) ->[104,107,110,115]
5)subSet(103,110) ->[103,104,107]
6)comparator() ->null

Note:
1)Default natural sorting order for numbers Ascending order and for String alphabetical order.
2)We can apply the above methods only on SortedSet implemented class objects. That is on the TreeSet object.

TreeSet:
--------
-The underlying data structure for TreeSet is Balanced Tree.
-Duplicate objects are not allowed.It you try to add won't get compilation or runtime error.
-Insertion order not preserved, but all objects will be inserted according to some sorting order.
-Hetrogeneous objects are not allowed.It we are trying to insert heterogeneous objects then we will get runtime exception saying ClassCastException.
-***one Null insertion is allowed***.only for empty TreeSet.---check it in older version.

TreeSet Constructor
-------------------
1)TreeSet t=new TreeSet();
-creates an empty TreeSet object where elements will be inserted according to default natural sorting order.
2)TreeSet t=new TreeSet(Comparator c);
-Creates an empty TreeSet Object where elements will be inserted according to customized sorting order.

3)TreeSet t=new TreeSet(Collection c);

4)TreeSet t=new TreeSet(SortedSet s);

Example:
--------
TreeSet t=new TreeSet();
t.add("A");
t.add("a");
t.add("B");
t.add("Z");
t.add("L");
//t.add(10);//ClassCastException
t.add(null);//NullPointerException
System.out.println(t); //[A,B,L,Z,a]


Example 2:
----------
TreeSet t=new TreeSet();

t.add(null);//No Exception
System.out.println(t); //[null]

Null Acceptance(not working in 1.8 check in older version)
---------------
1)For empty TreeSet as the first element null insertion is possible. But after inserting that null if we are trying to insert any another element we will get NullPointerException.
2)For non empty TreeSet if we are trying to insert Null then we will get NullPointerException.

Example
-------
TreeSet t=new TreeSet();
t.add(new StringBuffer("A"));
t.add(new StringBuffer("A"));
t.add(new StringBuffer("A"));
t.add(new StringBuffer("A"));
system.out.println(t);//ClassCastException


Note:
-----
1)If we are depending on default natural sorting order then objects should be homogeneous and comparable. Otherwise we will get runtime exception saying ClassCastException.
2)An object is said to be comparable if and only if the corresponding class implements java.lang.comparable interface.
3)String class and all wrapper classes already implements comparable interface. But StringBuffer doesn't implements comparable interface.
** Hence in the above progrm we got ClassCastException**

Comparable Interface:
---------------------
-This interface is present in java.lang package.It contains only one method compareTo().
 public int compareTo(Object obj)

Example:
obj1.compareTo(obj2)
-returns -ve iff obj1 has to come before obj2
-returns +ve iff obj1 has to come after obj2
-returns 0 iff obj1 & obj2 are equal.
Example
-------
System.out.println("A".compareTo("Z"));//-ve
System.out.println("Z".compareTo("B"));//+ve
System.out.println("A".compareTo("A"));//0
System.out.println("A".compareTo(null));//NullPointerException

Example
-------
If we are depending on default natural sorting order internally, JVM will call compareTo() method will inserting objects to the TreeSet. Hence the objects should be Comparable.

TreeSet t=new TreeSet();
t.add("B");
t.add("Z");//"Z".compareTo("B"); +ve -------
t.add("A");//"A".compareTo("B"); -ve
System.out.println(t); //[A,B,Z]

Note : Twist in above code
obj1.compareTo(obj2)
obj1--element we are trying to insert
obj2--element already inserted/present.


Note:
1)If we are not satisfied with default natural sorting order or if the default natural sorting order is not already available then we can define our own customized sorting by using Comparator.
2)Comparable ment for Default Natural Sorting order where as Comparator ment for Customized Sorting order.

Comparator interface
--------------------
-We can use comparator to define our own sorting(Customized sorting)
-Comparator interface present in java.util package
-It defines two methods.compare and equals
1)public int compare(Object obj1,Object obj2)
  returns -ve iff obj1 has to come before obj2
  returns +ve iff obj1 has to come after obj2
  returns 0 iff obj1 & obj2 are equal.
2)public boolean equals();

Twist:
whenever we are implementing Comparator interface we never override equals method.
Are we voilating interface rule?
-No
As every class extends Object class, equals method is inherited from Object class.
So implementing equals() method is optional, because it is already available in every java class from Object class through inheritance.



Write a program to insert objects into the TreeSet 
--------------------------------------------------where the sorting order is descending order.
--------------------------------------------
import java.util.*;

class TreeSetDemo3
{
  public static void main(String[] args)
  {
     TreeSet t=new TreeSet(new MyComparator());
     t.add(10);
     t.add(0);
     t.add(15);
     t.add(20);
     t.add(20);
     System.out.println(t);
  }
}
class MyComparator implements Comparator
{
   public int compare(Object obj1,Object obj2)
   {
     Integer i1=(Integer)obj1;
     Integer i2=(Integer)obj2;

     if(i1<i2)
       return +1;
     else if(i1>i2)
       return -1;
     else
       return 0;
   }
}

output: [20,15,15,0]

Internal logic with balanced tree
----------------------------------
     TreeSet t=new TreeSet(new MyComparator());
     
     t.add(10);

     t.add(0);//compare(0,10)---->+ve

     t.add(15);//compare(15,10) -ve

     t.add(20);//compare(20,10) +ve
                 compare(20,15) -ve

     t.add(20);//compare(20,10) -ve
                 compare(20,15) -ve
                 compare(20,20) 0
     System.out.println(t);


Balanced Tree
--------------

                 10
             15      0
          20

-ve on left side
+ve on right side
